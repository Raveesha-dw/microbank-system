#spring.application.name=accounts

server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
#  datasource:
#    url: jdbc:mysql://localhost:3306/accountsdb
#    username: root
#    password: root
#  jpa:
#    show-sql: true
#  sql:
#    init:
#      mode: always

  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
    h2:
      console:
        enabled: true
    jpa:
      database-platform: org.hibernate.dialect.H2Dialect
      hibernate:
        ddl-auto: update
      show-sql: true
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
  config:
    import: "optional:configserver:http://localhost:8071/"
#  rabbitmq:
#    host: "localhost"
#    port: 5672
#    username: "guest"
#    password: "guest"

management: # actuacter related api paths should be enabled
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enable: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      access: unrestricted  #This allows unrestricted access to the /actuator/shutdown endpoint, meaning anyone can shut down the application
    health:
      probes:
        enabled: true
  info:
    env:   #This exposes environment properties (like system environment variables) in the /actuator/info endpoint
      enabled: true
        # enable actuator endpoint that will allow refreshing properties at runtime
  metrics:
    tags:
      application: ${spring.application.name}  #This sets the application name in the /actuator/metrics endpoint. all metric will be grouped under this


#This configures the microservice as a Eureka client, so it can register itself with a Eureka server
eureka:
  instance:  #When registering with Eureka, this setting makes Eureka prefer the instance's IP address instead of hostname (useful when running in Docker or VMs).
    preferIpAddress: true
  client:
    fetchRegistry: true  #this service fetches the list of other registered services from Eureka.
    registerWithEureka: true  #this service registers with Eureka
    serviceUrl:
      defaultZone: http://localhost:8070/eureka

info:
  app:
    name: "accounts"
    description: "Accounts Microservice"
    version: "2.0.0"

logging:
  level:
    com:
      springboot:
        accounts: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitForPeriod: 1
      limitRefreshPeriod: 5000


