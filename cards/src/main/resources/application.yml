#spring.application.name=cards


server:
  port: 9000
spring:
  application:
    name: "cards"
  profiles:
    active: "prod"
#  datasource:
#    url: jdbc:mysql://localhost:3308/cardsdb
#    username: root
#    password: root
#  jpa:
#    show-sql: true
#  sql:
#    init:
#      mode: always

  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
    h2:
      console:
        enabled: true
    jpa:
      database-platform: org.hibernate.dialect.H2Dialect
      hibernate:
        ddl-auto: update
      show-sql: true

  config:
    import: "optional:configserver:http://localhost:8071/"
#  rabbitmq:
#    host: "localhost"
#    port: 5672
#    username: "guest"
#    password: "guest"

management:
  endpoints:
    web:
      exposure:
        include: "*"  #enable all endpoints provided by the actuator
  endpoint:
    shutdown:
      access: unrestricted
  info:
    env:
      enabled: true

#This configures the microservice as a Eureka client, so it can register itself with a Eureka server
eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka

info:
  app:
    name: "cards"
    description: "Cards Microservice"
    version: "1.2.0"